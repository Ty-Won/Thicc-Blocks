namespace ca.mcgill.ecse223.block.model;

use Block223PlayMode.ump;
use Block223Persistence.ump;
use Block223States.ump;

class Block223 {
   1 <@>- * User users;
   1 <@>- * UserRole roles;
   1 <@>- * Game games;
   
	public Game findGame(String name) {
		// Look for the game with <name>
		for (Game curGame : games) {
			if (curGame.getName().equals(name)) {
				return curGame;
			}
		}
	
		// No game found
		return null;
 	}

   public PlayedGame findPlayableGame(int id) {

    for (PlayedGame playedGame : getPlayedGames()) {
      if (playedGame.getId() == id) {
        return playedGame;
      }
    }
    
    return null;
  }

   
}

class User {
   unique username;
   1 -> 1..2 UserRole roles;

   public static String findUsername(UserRole role) {
    
    for (User user : usersByUsername.values()) {
      if (user.getRoles().contains(role)) {
        return user.getUsername();
      }
    }
    
    
    // No username found
    return null;
  }
}

class UserRole {
   abstract;
   password;
}

class Admin {
   isA UserRole;
}

class Player {
   isA UserRole;
}

class Game {
   const Integer MIN_NR_LEVELS = 1;
   const Integer MAX_NR_LEVELS = 99; // this is somewhat redundant because the max multiplicity is enforced by Umple
   const Integer PLAY_AREA_SIDE = 390; // play area is now constant
   const Integer WALL_PADDING = 10;
   const Integer COLUMNS_PADDING = 5;
   const Integer ROW_PADDING = 2;
   unique name;
   Integer nrBlocksPerLevel;
   * -- 1 Admin admin;
   1 <@>- * Block blocks;
   1 <@>- 1..99 Level levels;
   1 <@>- * BlockAssignment blockAssignments;
   1 <@>- 1 Ball ball;
   1 <@>- 1 Paddle paddle;
   
   	public Block findBlock(int id) {
	  for (Block block : this.getBlocks()) {
		  if (block.getId() == id) {
			  return block;
		  }
	  }
	  return null;
  	}

  public Block getRandomBlock() {
    List<Block> blocks = getBlocks();
    int i = new Random().nextInt(blocks.size());
    return getBlock(i);
  }

  public static int[] getMaxBlockCapacity() {
    int[] x_y_capacity = { (Game.PLAY_AREA_SIDE - 2 * Game.WALL_PADDING) / (Block.SIZE + Game.COLUMNS_PADDING) + 1,
      ((Game.PLAY_AREA_SIDE - 2 * Game.WALL_PADDING) / (Block.SIZE + Game.ROW_PADDING) + 1) };
    return x_y_capacity;
  }
}

class Block {
   const Integer MIN_COLOR = 0;
   const Integer MAX_COLOR = 255;
   const Integer MIN_POINTS = 1;
   const Integer MAX_POINTS = 1000; 
   const Integer SIZE = 20;
   autounique id;
   Integer red;
   Integer green;
   Integer blue;
   Integer points;
   
  before constructor {
   		if (aRed < 0 || aRed > 255) {
   			throw new RuntimeException("Red invalid");
   		}
   		if (aGreen < 0 || aGreen > 255) {
   			throw new RuntimeException("Green invalid");
   		}
   		if (aBlue < 0 || aBlue > 255) {
   			throw new RuntimeException("Blue invalid");
   		}
   		if (aPoints < 1 || aPoints > 1000) {
   			throw new RuntimeException("Points invalid");
   		}
   }
}

// random attribute not needed anymore
// Each level is filled up with random blocks just before playing the level to reach the nrBlocksPerLevel defined in Game
class Level {
}

class BlockAssignment {
   Integer gridHorizontalPosition;
   Integer gridVerticalPosition;
   * -- 1 Level level;
   * -- 1 Block block;
}

class Ball {
   const Integer BALL_DIAMETER = 10;
   Integer minBallSpeedX;
   Integer minBallSpeedY;
   Double ballSpeedIncreaseFactor;
}

class Paddle {
   const Integer PADDLE_WIDTH = 5;
   const Integer VERTICAL_DISTANCE = 30;
   Integer maxPaddleLength;
   Integer minPaddleLength;
}
