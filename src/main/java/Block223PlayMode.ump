class Block223 {
   1 <@>- * PlayedGame playedGames;
   1 <@>- * HallOfFameEntry entries;
}

class Game {
   Boolean published = false;
   1 -> 0..1 HallOfFameEntry mostRecentEntry;
}

class PlayedGame {
   depend ca.mcgill.ecse223.block.model.BouncePoint.BounceDirection;
   depend java.awt.geom.Rectangle2D;
   
   const Integer INITIAL_WAIT_TIME = 8; // at design time, the initial wait time may be adjusted as seen fit
   autounique id;
   const Integer NR_LIVES = 3;
   Integer score = 0;
   Integer lives = NR_LIVES;
   Integer currentLevel = 1;
   Double waitTime = INITIAL_WAIT_TIME;
   * -- 0..1 Player player; // an admin may test the game; a game is played in test mode if player == null
   playername; // added here so that it only needs to be determined once
   
   // the PlayedBall and PlayedPaddle are not in a separate class to avoid the bug in Umple that occurred for the second constructor of Game

   // no direct link to Ball, because the ball can be found by navigating to PlayedGame, Game, and then Ball
   const Integer BALL_INITIAL_X = Game.PLAY_AREA_SIDE / 2;
   const Integer BALL_INITIAL_Y = Game.PLAY_AREA_SIDE / 2;
   // 0/0 is the top left corner of the play area, i.e., a directionX/Y of 0/1 moves the ball down in a straight line
   defaulted Double ballDirectionX = getGame().getBall().getMinBallSpeedX();
   defaulted Double ballDirectionY = getGame().getBall().getMinBallSpeedY();
   // the position of the ball is at the center of the ball
   defaulted Double currentBallX = BALL_INITIAL_X;
   defaulted Double currentBallY = BALL_INITIAL_Y;

   // no direct link to Paddle, because the paddle can be found by navigating to PlayedGame, Game, and then Paddle
   const Integer PADDLE_MOVE_RIGHT = 5; // pixels moved when right arrow key is pressed
   const Integer PADDLE_MOVE_LEFT = -5; // pixels moved when left arrow key is pressed
   Double currentPaddleLength = getGame().getPaddle().getMaxPaddleLength();
   // the position of the paddle is at its top right corner
   defaulted Double currentPaddleX = (Game.PLAY_AREA_SIDE - currentPaddleLength) / 2;
   immutable Double currentPaddleY = Game.PLAY_AREA_SIDE - Paddle.VERTICAL_DISTANCE - Paddle.PADDLE_WIDTH;

   * -- 1 Game game;
   1 <@>- * PlayedBlockAssignment blocks;
   0..1 -> 0..1 BouncePoint bounce;
   
   private BouncePoint calculateBouncePointPaddle() {
	  //Get all the attributes of the current ball status
	  Double oldBallX = this.currentBallX;
	  Double oldBallY = this.currentBallY;
	  Double oldDirX = this.ballDirectionX;
	  Double oldDirY = this.ballDirectionY;
	  
	  //Set all the attributes of the potential future ball status
	  Double newBallX = oldBallX + oldDirX;
	  Double newBallY = oldBallY + oldDirY;
	  
	  //Get paddle attributes
	  Double paddleX = this.currentPaddleX;
	  Double paddleY = this.currentPaddleY;
	  Double paddleLength = this.currentPaddleLength;
	 
	  Rectangle2D paddleRect = new Rectangle2D.Double(paddleX - 5, paddleY - 5, paddleLength + 10, 10);
	  if (paddleRect.intersectsLine(oldBallX, oldBallY, newBallX, newBallY)) {
		  BouncePoint zoneB = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, paddleX - 5, paddleY, paddleX - 5, paddleY + 5, BounceDirection.FLIP_X);
		  BouncePoint zoneC = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, paddleX + paddleLength + 5, paddleY, paddleX + paddleLength + 5, paddleY + 5, BounceDirection.FLIP_X);
		  BouncePoint zoneA = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, paddleX, paddleY - 5, paddleX + paddleLength, paddleY - 5, BounceDirection.FLIP_Y);
		  
		  //Zone F
		  //Circle equation: (x-a)^2 + (y-b)^2 = r^2
		  Double a = paddleX + paddleLength;
		  Double b = paddleY;
		  Double r = 5.0;
		  //Line Equation: y = mx + c
		  Double m = (newBallY - oldBallY)/(newBallX - oldBallX);
		  Double c = oldBallY - (m * oldBallX);
		  BouncePoint[] zoneFList = checkCircleLineIntersection(a, b, r, m, c, oldBallX, oldBallY, newBallX, newBallY, oldDirX, false);
		  
		  //Zone E
		  //Circle equation: (x-a)^2 + (y-b)^2 = r^2
		  a = paddleX;
		  b = paddleY;
		  r = 5.0;
		  BouncePoint[] zoneEList = checkCircleLineIntersection(a, b, r, m, c, oldBallX, oldBallY, newBallX, newBallY, oldDirX, true);
		  
		  //Find closest intersection point
		  BouncePoint[] allZonesList = {zoneA, zoneB, zoneC, zoneEList[0], zoneEList[1], zoneFList[0], zoneFList[1]};
		  Double minDistance = Double.MAX_VALUE;
		  BouncePoint finalBP = null;
		  for (int i=0; i < allZonesList.length; i++) {
			  if (allZonesList[i] != null) {
				  Double distance = Math.sqrt(Math.pow(Math.abs(oldBallX - allZonesList[i].getX()), 2) + Math.pow(Math.abs(oldBallY - allZonesList[i].getY()), 2));
				  if (distance < minDistance) {
					  minDistance = distance;
					  finalBP = allZonesList[i];
				  }
			  }
		  }
		  return finalBP;
	  }
	  else {
		  return null;
	  }
  }
  
  private BouncePoint[] checkCircleLineIntersection(Double a, Double b, Double r, Double m, Double c, Double oldBallX, Double oldBallY, Double newBallX, Double newBallY, Double oldDirX, boolean isLeftCorner){
    Double distanceToCircle = (Math.pow(Math.abs(m * a - b + c), 2)) / (m * m + 1);
	  //Check for real solutions to intersection
	  BouncePoint[] intersectionList = new BouncePoint[2];
	  if (distanceToCircle <= (r*r)) {
		  //Solve quadratic equation for X, then get Y
		  Double quadA = 1 + (m * m);
		  Double quadB = 2 * (((c - b) * m) - a);
		  Double quadC = ((c - b) * (c - b)) + (a * a) - (r * r);
		  
		  Double solX1 = (-quadB + Math.sqrt((quadB * quadB) - (4 * quadA * quadC))) / (2*quadA);
		  Double solX2 = (-quadB - Math.sqrt((quadB * quadB) - (4 * quadA * quadC))) / (2*quadA);
		  Double solY1 = (m * solX1) + c;
		  Double solY2 = (m * solX2) + c;
		  
		  if (!Double.isNaN(solX1) && !Double.isNaN(solY1) && Math.min(oldBallX, newBallX)-0.000001 <= solX1 && solX1 <= Math.max(oldBallX,  newBallX)+0.000001
        		  && Math.min(oldBallY, newBallY)-0.000001 <= solY1 && solY1 <= Math.max(oldBallY, newBallY)+0.000001) {
			  BouncePoint zone1;
			  if (oldDirX >= 0) {
				  if (isLeftCorner) {
					  zone1 = new BouncePoint(solX1, solY1, BounceDirection.FLIP_X);
				  }
				  else {
					  zone1 = new BouncePoint(solX1, solY1, BounceDirection.FLIP_Y);
				  }
				  
				  intersectionList[0] = zone1;
			  }
			  else {
				  if (isLeftCorner) {
					  zone1 = new BouncePoint(solX1, solY1, BounceDirection.FLIP_Y);
				  }
				  else {
					  zone1 = new BouncePoint(solX1, solY1, BounceDirection.FLIP_X);
				  }
				  intersectionList[0] = zone1;
			  }
		  }
		  
		  if (!Double.isNaN(solX2) && !Double.isNaN(solY2) && Math.min(oldBallX, newBallX)-0.000001 <= solX2 && solX2 <= Math.max(oldBallX,  newBallX)+0.000001
        		  && Math.min(oldBallY, newBallY)-0.000001 <= solY2 && solY2 <= Math.max(oldBallY, newBallY)+0.000001) {
			  BouncePoint zone2;
			  if (oldDirX >= 0) {
				  if (isLeftCorner) {
					  zone2 = new BouncePoint(solX2, solY2, BounceDirection.FLIP_X);
				  }
				  else {
					  zone2 = new BouncePoint(solX2, solY2, BounceDirection.FLIP_Y);
				  }
				  intersectionList[1] = zone2;
			  }
			  else {
				  if (isLeftCorner) {
					  zone2 = new BouncePoint(solX2, solY2, BounceDirection.FLIP_Y);
				  }
				  else {
					  zone2 = new BouncePoint(solX2, solY2, BounceDirection.FLIP_X);
				  }
				  intersectionList[1] = zone2;
			  }
		  }
	  }
	  return intersectionList;
  }
  
  private BouncePoint calculateBouncePointWall() {
	//Get all the attributes of the current ball status
	  Double oldBallX = this.currentBallX;
	  Double oldBallY = this.currentBallY;
	  Double oldDirX = this.ballDirectionX;
	  Double oldDirY = this.ballDirectionY;
	  
	  //Set all the attributes of the potential future ball status
	  Double newBallX = oldBallX + oldDirX;
	  Double newBallY = oldBallY + oldDirY;
	  
	  //Find intersection points with the 3 wall zones (A = left, B = top, C = right)
	  BouncePoint zoneA = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, 5.0, 5.0, 5.0, 385.0, BounceDirection.FLIP_X);
	  BouncePoint zoneC = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, 385.0, 5.0, 385.0, 385.0, BounceDirection.FLIP_X);
	  BouncePoint zoneB = checkLineIntersections(oldBallX, oldBallY, newBallX, newBallY, 5.0, 5.0, 385.0, 5.0, BounceDirection.FLIP_Y);
	  
	  //Check if they are null and if not get the distance from the old ball position to the various bounce points
	  Double zoneADistance = null;
	  Double zoneCDistance = null;
	  Double zoneBDistance = null;
	  if (zoneA != null) {
		  zoneADistance = Math.sqrt(Math.pow(Math.abs(oldBallX - zoneA.getX()), 2) + Math.pow(Math.abs(oldBallY - zoneA.getY()), 2));
	  }
	  if (zoneC != null) {
		 zoneCDistance = Math.sqrt(Math.pow(Math.abs(oldBallX - zoneC.getX()), 2) + Math.pow(Math.abs(oldBallY - zoneC.getY()), 2));
	  }
	  if (zoneB != null) {
		  zoneBDistance = Math.sqrt(Math.pow(Math.abs(oldBallX - zoneB.getX()), 2) + Math.pow(Math.abs(oldBallY - zoneB.getY()), 2));
	  }
	  
	  //Find the closest bounce point to the ball location
	  Double distanceArr[] = {zoneADistance, zoneBDistance, zoneCDistance};
	  int minIndex = 10;
	  Double minDistance = Double.MAX_VALUE;
	  
	  for (int i = 0; i < 3; i++) {
		  if (distanceArr[i] != null) {
			  if (distanceArr[i] < minDistance) {
				  minDistance = distanceArr[i];
				  minIndex = i;
			  }
		  }
	  }
	  
	  //Return the closest bounce point but check for the corners
	  if (minIndex == 0) {
		  if (zoneA.getX() == 5 && zoneA.getY() == 5) {
			  zoneA.setDirection(BounceDirection.FLIP_BOTH);
		  }
		  return zoneA;
	  }
	  else if (minIndex == 1) {
		  if ((zoneB.getX() == 5 && zoneB.getY() == 5) || (zoneB.getX() == 385 && zoneB.getY() == 5)) {
			  zoneB.setDirection(BounceDirection.FLIP_BOTH);
		  }
		  return zoneB;
	  }
	  else if (minIndex == 2) {
		  if (zoneC.getX() == 385 && zoneC.getY() == 5) {
			  zoneC.setDirection(BounceDirection.FLIP_BOTH);
		  }
		  return zoneC;
	  }
	  else { //minIndex stayed at 10 meaning all 3 were null (this shouldn't be possible as it was already verified that the ball hits the wall, but this is here for safety)
		  return null;
	  }
  }
  
  private BouncePoint checkLineIntersections(Double AX, Double AY, Double BX, Double BY, Double CX, Double CY, Double DX, Double DY, BounceDirection bd) {
	  // Line AB represented as a1x + b1y = c1 
      double a1 = BY - AY; 
      double b1 = AX - BX; 
      double c1 = a1*(AX) + b1*(AY); 
     
      // Line CD represented as a2x + b2y = c2 
      double a2 = DY - CY; 
      double b2 = CX - DX; 
      double c2 = a2*(CX)+ b2*(CY); 
     
      double determinant = a1*b2 - a2*b1; 
     
      if (determinant == 0) 
      { 
          // The lines are parallel so no intersection
          return null; 
      } 
      else
      { 
          double intersectX = (b2*c1 - b1*c2)/determinant; 
          double intersectY = (a1*c2 - a2*c1)/determinant; 
          if (Math.min(AX, BX)-0.000001 <= intersectX && intersectX <= Math.max(AX,  BX)+0.000001 && Math.min(AY, BY)-0.000001 <= intersectY && intersectY <= Math.max(AY, BY)+0.000001
        		  && Math.min(CX, DX)-0.000001 <= intersectX && intersectX <= Math.max(CX,  DX)+0.000001
        		  && Math.min(CY, DY)-0.000001 <= intersectY && intersectY <= Math.max(CY, DY)+0.000001) {
        	  BouncePoint bp = new BouncePoint(intersectX, intersectY, bd);
        	  return bp;
          }
          else {
        	  return null;
          }
      } 
  }
  
  private void bounceBall() {
	  BouncePoint bp = this.getBounce();
	  Double ballX = this.getCurrentBallX();
	  Double ballY = this.getCurrentBallY();
	  Double ballDirX = this.getBallDirectionX();
	  Double ballDirY = this.getBallDirectionY();
	  
	  Double incomingX = Math.abs(ballX - bp.getX());
	  Double incomingY = Math.abs(ballY - bp.getY());
	  Double outgoingX = Math.abs(Math.abs(ballDirX) - Math.abs(incomingX));
	  Double outgoingY = Math.abs(Math.abs(ballDirY) - Math.abs(incomingY));
	  
	  Double newBallX;
	  Double newBallY;
	  Double newBallDirX;
	  Double newBallDirY;
	  if (!(outgoingX < 0.000001 && outgoingY < 0.000001)) {
		  //Set new ball direction and position
		  if (bp.getDirection() == BounceDirection.FLIP_Y) {
			  Double sign = Math.signum(ballDirX);
			  	if (sign == 0) {
					sign = 1.0;
			  	}
			  newBallDirX = ballDirX + (sign*0.1*Math.abs(ballDirY));
			  newBallDirY = ballDirY * (-1);
	
			  newBallX = bp.getX() + (outgoingX * Math.signum(newBallDirX)) + (0.1 * outgoingY * Math.signum(newBallDirX));
			  newBallY = bp.getY() + (outgoingY * Math.signum(newBallDirY));
		  }
		  else if (bp.getDirection() == BounceDirection.FLIP_X) {
		  	  Double sign = Math.signum(ballDirY);
			  	if (sign == 0) {
			  		sign = 1.0;
			  	}
			  newBallDirX = ballDirX * (-1);
			  newBallDirY = ballDirY + (sign*0.1*Math.abs(ballDirX));
			  
			  newBallX = bp.getX() + (outgoingX * Math.signum(newBallDirX));
			  newBallY = bp.getY() + (outgoingY * Math.signum(newBallDirY)) + (0.1 * outgoingX * Math.signum(newBallDirY));
		  }
		  else {
			  newBallDirX = ballDirX * (-1);
			  newBallDirY = ballDirY * (-1);
			  
			  newBallX = bp.getX() + (outgoingX * Math.signum(newBallDirX));
			  newBallY = bp.getY() + (outgoingY * Math.signum(newBallDirY));
		  }
		  
		  this.setBallDirectionX(newBallDirX);
		  this.setBallDirectionY(newBallDirY);
		  this.setCurrentBallX(newBallX);
		  this.setCurrentBallY(newBallY);
  	  }
  	  else {
  	  	  this.setCurrentBallX(bp.getX());
  	  	  this.setCurrentBallY(bp.getY());
  	  }
  }

	before constructor {
      boolean didAddGameResult = setGame(aGame);
      if (!didAddGameResult)
      {
         throw new RuntimeException("Unable to create playedGame due to game");
      }
   }
}

class PlayedBlockAssignment {
   // the associated block is either (a) the same as the one of the corresponding BlockAssignent or (b) randomly chosen
   * -- 1 Block block;
   // the position of a block is at its top right corner
   Integer x;
   Integer y;
}

class HallOfFameEntry {
   Integer score;
   playername; // added here so that it only needs to be determined once
   * -- 1 Player player;
   // the sorted keyword keeps the list of entries in the game automatically sorted by the score
   * sorted {score} -- 1 Game game;
}

// this class needs to be specified but the use of it is optional; it is also not added to the persistence file
// you may implement bounce behavior differently
class BouncePoint {
   Double x;
   Double y;
   enum BounceDirection { FLIP_X, FLIP_Y, FLIP_BOTH }
   BounceDirection direction;
   0..1 -> 0..1 PlayedBlockAssignment hitBlock;
}